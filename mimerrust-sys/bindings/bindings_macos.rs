/* automatically generated by rust-bindgen 0.70.1 */

pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const MIMER_NO_DATA: u32 = 100;
pub const MIMER_SUCCESS: u32 = 0;
pub const MIMER_TASKS_EXHAUSTED: i32 = -11015;
pub const MIMER_RTCS_NOT_FOUND: i32 = -14726;
pub const MIMER_INVALID_TRANSACTION_STATE: i32 = -14732;
pub const MIMER_RTCS_EXHAUSTED: i32 = -16241;
pub const MIMER_TABLE_COMPRESSED: i32 = -16242;
pub const MIMER_PAGE_UPDATED: i32 = -16244;
pub const MIMER_INVALID_RTTYPE: i32 = -16252;
pub const MIMER_INVALID_RTPOLICY: i32 = -16253;
pub const MIMER_TYPE_MISMATCH: i32 = -16254;
pub const MIMER_RESULT_SET_MISMATCH: i32 = -16255;
pub const MIMER_COLUMN_SET_MISMATCH: i32 = -16256;
pub const MIMER_POLICY_MISMATCH: i32 = -16257;
pub const MIMER_COULD_NOT_LOCK_PAGE: i32 = -16258;
pub const MIMER_RTCS_INVALID: i32 = -16259;
pub const MIMER_TABLE_VARFORMAT: i32 = -16262;
pub const MIMER_NOT_SINGLE_STATEMENT: i32 = -18246;
pub const MIMER_NOT_SINGLE_COLUMN: i32 = -18247;
pub const MIMER_NOT_SINGLE_ROW: i32 = -18248;
pub const MIMER_INPUT_PARAMETER_FOUND: i32 = -18250;
pub const MIMER_SCROLL_USED: i32 = -18251;
pub const MIMER_NOT_SELECT: i32 = -18252;
pub const MIMER_TIP_MISMATCH: i32 = -18253;
pub const MIMER_COLUMN_IS_PART_OF_KEY: i32 = -18254;
pub const MIMER_COLUMN_IS_PART_OF_INDEX: i32 = -18255;
pub const MIMER_NOT_SINGLE_TDA: i32 = -18257;
pub const MIMER_VOLATILE_DATA: i32 = -18258;
pub const MIMER_NO_FLUSH_PRIVILEGE: i32 = -18259;
pub const MIMER_NO_CRITICAL_SECTION_OBJECTS: i32 = -18261;
pub const MIMER_INVALID_STATEMENT_STATUS: i32 = -19086;
pub const MIMER_ERROR_ALLOCATING_TASK: i32 = -21074;
pub const MIMER_OUTOFMEMORY: i32 = -24001;
pub const MIMER_SQL_NULL_VALUE: i32 = -24002;
pub const MIMER_TRUNCATION_ERROR: i32 = -24003;
pub const MIMER_ILLEGAL_CHARACTER: i32 = -24004;
pub const MIMER_STATEMENT_CANNOT_BE_PREPARED: i32 = -24005;
pub const MIMER_UNDEFINED_COMMUNICATION: i32 = -24006;
pub const MIMER_COULD_NOT_RELEASE: i32 = -24007;
pub const MIMER_POSITIVE_OVERFLOW: i32 = -24010;
pub const MIMER_NEGATIVE_OVERFLOW: i32 = -24011;
pub const MIMER_UNDEFINED_FLOAT_VALUE: i32 = -24012;
pub const MIMER_UUID_FORMAT_ERROR: i32 = -24013;
pub const MIMER_SEQUENCE_ERROR: i32 = -24101;
pub const MIMER_NONEXISTENT_COLUMN_PARAMETER: i32 = -24102;
pub const MIMER_UNSET_PARAMETER: i32 = -24103;
pub const MIMER_CAST_VIOLATION: i32 = -24104;
pub const MIMER_PARAMETER_NOT_OUTPUT: i32 = -24105;
pub const MIMER_PARAMETER_NOT_INPUT: i32 = -24106;
pub const MIMER_PARAMETER_INVALID: i32 = -24107;
pub const MIMER_HANDLE_INVALID: i32 = -24108;
pub const MIMER_TIMESTAMP_FORMAT_ERROR: i32 = -24109;
pub const MIMER_ALLOCATION_FAILURE_THREAD: i32 = -24110;
pub const MIMER_WRONG_SERVER_TYPE: i32 = -24111;
pub const MIMER_NONEXISTENT_RECORD: i32 = -24112;
pub const MIMER_INCOMPATIBLE_POINTER_ATTRIBUTES: i32 = -24113;
pub const MIMER_INVALID_POINTER_TYPE: i32 = -24114;
pub const MIMER_UNSUPPORTED_AUTHENTICATION_METHOD: i32 = -24115;
pub const MIMER_NULL_VIOLATION: i32 = -24116;
pub const MIMER_MEMORY_MAP_ERROR: i32 = -24414;
pub const MIMER_TLS_ERROR: i32 = -24415;
pub const MIMER_INVALID_CONTROL_BLOCK: i32 = -24416;
pub const MIMER_NO_DATA_NO_REQUEST: i32 = -24476;
pub const MIMER_COMMUNICATION_ERROR: i32 = -24501;
pub const MIMER_SUCCESS_NO_REQUEST: i32 = -24576;
pub const MIMER_SUCCESS_PENDING: i32 = -24577;
pub const MIMER_INTERNAL_FLUSH_ERROR: i32 = -21075;
pub const MIMER_INTERNAL_ERROR: i32 = -24201;
pub const MIMER_INTERNAL_ILLEGAL_SESSION_ERROR: i32 = -24202;
pub const MIMER_INTERNAL_ILLEGAL_STATEMENT_ERROR: i32 = -24203;
pub const MIMER_INTERNAL_VARCHAR_NULL: i32 = -24209;
pub const MIMER_INTERNAL_VARCHAR_BASE_ERROR: i32 = -24210;
pub const MIMER_INTERNAL_VARCHAR_TRUNC: i32 = -24211;
pub const MIMER_INTERNAL_VARCHAR_POSOVRFLW: i32 = -24212;
pub const MIMER_INTERNAL_VARCHAR_NEGOVRFLW: i32 = -24213;
pub const MIMER_INTERNAL_VARCHAR_PREC: i32 = -24215;
pub const MIMER_INTERNAL_NUMERIC_NULL: i32 = -24219;
pub const MIMER_INTERNAL_NUMERIC_BASE_ERROR: i32 = -24220;
pub const MIMER_INTERNAL_NUMERIC_TRUNC: i32 = -24221;
pub const MIMER_INTERNAL_NUMERIC_PREC: i32 = -24225;
pub const MIMER_INTERNAL_LOBID_NULL: i32 = -24229;
pub const MIMER_INTERNAL_LOBID_BASE_ERROR: i32 = -24230;
pub const MIMER_INTERNAL_LOBID_TRUNC: i32 = -24231;
pub const MIMER_INTERNAL_LOBID_POSOVRFLW: i32 = -24232;
pub const MIMER_INTERNAL_LOBID_NEGOVRFLW: i32 = -24233;
pub const MIMER_INTERNAL_LOBID_PREC: i32 = -24235;
pub const MIMER_INTERNAL_UTFCHAR_BASE_ERROR: i32 = -24240;
pub const MIMER_INTERNAL_UTF8CHAR_BASE_ERROR: i32 = -24250;
pub const MIMER_INTERNAL_CLIENT_ERROR: i32 = -24417;
pub const MIMER_COMMIT: u32 = 0;
pub const MIMER_ROLLBACK: u32 = 1;
pub const MIMER_TRANS_DEFAULT: u32 = 0;
pub const MIMER_TRANS_READWRITE: u32 = 0;
pub const MIMER_TRANS_READONLY: u32 = 4;
pub const MIMER_SCROLLABLE: u32 = 1;
pub const MIMER_FORWARD_ONLY: u32 = 0;
pub const MIMER_CALLBACKS: u32 = 128;
pub const MIMER_NO_CALLBACKS: u32 = 0;
pub const MIMER_SQLITE_MODE: u32 = 64;
pub const MIMER_NEXT: u32 = 1;
pub const MIMER_PREVIOUS: u32 = 4294967295;
pub const MIMER_FIRST: u32 = 1073741825;
pub const MIMER_LAST: u32 = 3221225471;
pub const MIMER_RELATIVE: u32 = 0;
pub const MIMER_ABSOLUTE: u32 = 1073741824;
pub const MIMER_CHARACTER: u32 = 1;
pub const MIMER_DECIMAL: u32 = 2;
pub const MIMER_INTEGER: u32 = 3;
pub const MIMER_FLOAT: u32 = 4;
pub const MIMER_LIKE_PATTERN: u32 = 5;
pub const MIMER_T_INTEGER: u32 = 6;
pub const MIMER_T_SMALLINT: u32 = 7;
pub const MIMER_T_FLOAT: u32 = 8;
pub const MIMER_T_REAL: u32 = 9;
pub const MIMER_T_DOUBLE: u32 = 10;
pub const MIMER_CHARACTER_VARYING: u32 = 11;
pub const MIMER_DATE: u32 = 12;
pub const MIMER_TIME: u32 = 13;
pub const MIMER_TIMESTAMP: u32 = 14;
pub const MIMER_INTERVAL_YEAR: u32 = 15;
pub const MIMER_INTERVAL_MONTH: u32 = 16;
pub const MIMER_INTERVAL_DAY: u32 = 17;
pub const MIMER_INTERVAL_HOUR: u32 = 18;
pub const MIMER_INTERVAL_MINUTE: u32 = 19;
pub const MIMER_INTERVAL_SECOND: u32 = 20;
pub const MIMER_INTERVAL_YEAR_TO_MONTH: u32 = 21;
pub const MIMER_INTERVAL_DAY_TO_HOUR: u32 = 22;
pub const MIMER_INTERVAL_DAY_TO_MINUTE: u32 = 23;
pub const MIMER_INTERVAL_DAY_TO_SECOND: u32 = 24;
pub const MIMER_INTERVAL_HOUR_TO_MINUTE: u32 = 25;
pub const MIMER_INTERVAL_HOUR_TO_SECOND: u32 = 26;
pub const MIMER_INTERVAL_MINUTE_TO_SECOND: u32 = 27;
pub const MIMER_UNSIGNED_INTEGER: u32 = 28;
pub const MIMER_T_UNSIGNED_INTEGER: u32 = 29;
pub const MIMER_T_UNSIGNED_SMALLINT: u32 = 30;
pub const MIMER_NUMERIC: u32 = 31;
pub const MIMER_T_BIGINT: u32 = 32;
pub const MIMER_T_UNSIGNED_BIGINT: u32 = 33;
pub const MIMER_BINARY: u32 = 34;
pub const MIMER_BINARY_VARYING: u32 = 35;
pub const MIMER_RECORD: u32 = 36;
pub const MIMER_BLOB: u32 = 37;
pub const MIMER_CLOB: u32 = 38;
pub const MIMER_NCHAR: u32 = 39;
pub const MIMER_NCHAR_VARYING: u32 = 40;
pub const MIMER_NCLOB: u32 = 41;
pub const MIMER_BOOLEAN: u32 = 42;
pub const MIMER_BLOB_LOCATOR: u32 = 43;
pub const MIMER_CLOB_LOCATOR: u32 = 44;
pub const MIMER_NCLOB_LOCATOR: u32 = 45;
pub const MIMER_NATIVE_SMALLINT: u32 = 47;
pub const MIMER_NATIVE_SMALLINT_NULLABLE: u32 = 48;
pub const MIMER_NATIVE_INTEGER: u32 = 49;
pub const MIMER_NATIVE_INTEGER_NULLABLE: u32 = 50;
pub const MIMER_NATIVE_BIGINT: u32 = 51;
pub const MIMER_NATIVE_BIGINT_NULLABLE: u32 = 52;
pub const MIMER_NATIVE_REAL: u32 = 53;
pub const MIMER_NATIVE_REAL_NULLABLE: u32 = 54;
pub const MIMER_NATIVE_DOUBLE: u32 = 55;
pub const MIMER_NATIVE_DOUBLE_NULLABLE: u32 = 56;
pub const MIMER_NATIVE_BLOB: u32 = 57;
pub const MIMER_NATIVE_CLOB: u32 = 58;
pub const MIMER_NATIVE_NCLOB: u32 = 59;
pub const MIMER_NATIVE_BLOB_LOCATOR: u32 = 60;
pub const MIMER_NATIVE_CLOB_LOCATOR: u32 = 61;
pub const MIMER_NATIVE_NCLOB_LOCATOR: u32 = 62;
pub const MIMER_UTF8: u32 = 63;
pub const MIMER_GOLDEN_DECIMAL: u32 = 64;
pub const MIMER_GOLDEN_INTEGER: u32 = 65;
pub const MIMER_N_TINYINT_NULLABLE: u32 = 66;
pub const MIMER_GIS_LONGITUDE: u32 = 8004;
pub const MIMER_GIS_LATITUDE: u32 = 8020;
pub const MIMER_GIS_LOCATION: u32 = 8036;
pub const MIMER_GIS_COORDINATE: u32 = 8063;
pub const MIMER_UUID: u32 = 8104;
pub const MIMER_TYPE_TYPEID_MASK: u32 = 0;
pub const BSI_USERS_ON_THIS_MULTI: u32 = 1;
pub const BSI_PAGES_WRITTEN: u32 = 2;
pub const BSI_EXTEND_OPERATIONS: u32 = 3;
pub const BSI_PAGE_REQUESTS: u32 = 4;
pub const BSI_4K_PAGE_REQUESTS: u32 = 5;
pub const BSI_32K_PAGE_REQUESTS: u32 = 6;
pub const BSI_128K_PAGE_REQUESTS: u32 = 7;
pub const BSI_PAGE_FAULTS: u32 = 8;
pub const BSI_4K_PAGE_FAULTS: u32 = 9;
pub const BSI_32K_PAGE_FAULTS: u32 = 10;
pub const BSI_128K_PAGE_FAULTS: u32 = 11;
pub const BSI_PAGES_SWAPPED: u32 = 12;
pub const BSI_4K_PAGES_SWAPPED: u32 = 13;
pub const BSI_32K_PAGES_SWAPPED: u32 = 14;
pub const BSI_128K_PAGES_SWAPPED: u32 = 15;
pub const BSI_COMMITS: u32 = 16;
pub const BSI_READONLY_COMMITS: u32 = 17;
pub const BSI_CHECKS: u32 = 18;
pub const BSI_ABORTS: u32 = 19;
pub const BSI_PENDING_RESTARTS: u32 = 20;
pub const BSI_DB_CHECKS: u32 = 21;
pub const BSI_DB_FAILURES: u32 = 22;
pub const BSI_SHADOW_ACTIVE: u32 = 24;
pub const BSI_SYSTEM_STATUS: u32 = 25;
pub const BSI_DATABANKS: u32 = 26;
pub const BSI_TABLES: u32 = 27;
pub const BSI_TRANSACTIONS: u32 = 28;
pub const BSI_CANCELS: u32 = 29;
pub const BSI_RESERVED_SPACE: u32 = 30;
pub const BSI_USED_SPACE: u32 = 31;
pub const BSI_SQL_COMPILATIONS: u32 = 32;
pub const BSI_PSM_COMPILATIONS: u32 = 33;
pub const BSI_COMPILED_SQL: u32 = 34;
pub const BSI_COMPILED_PSM: u32 = 35;
pub const BSI_SHARED_SQL: u32 = 36;
pub const BSI_SHARED_PSM: u32 = 37;
pub const BSI_STATEMENTS: u32 = 38;
pub const BSI_LOGINS: u32 = 39;
pub const BSI_CLEANUPS: u32 = 40;
pub const BSI_LOGINS_ENABLED: u32 = 41;
pub const BSI_REJECTED_LOGINS: u32 = 42;
pub const BSI_REQUESTS: u32 = 43;
pub const BSI_SPLIT_TRANSFERS: u32 = 44;
pub const BSI_COMMUNICATIONS: u32 = 45;
pub const BSI_WAKE_USER_COUNT: u32 = 46;
pub const BSI_MAX_SPACE: u32 = 47;
pub const BSI_SPACE_ALLOC_COUNT: u32 = 48;
pub const BSI_SPACE_DEALLOC_COUNT: u32 = 49;
pub const BSI_REQUEST_THREADS_ACTIVE: u32 = 50;
pub const BSI_COMMIT_SET_SIZE: u32 = 51;
pub const BSI_REQUEUE_COUNT: u32 = 52;
pub const BSI_SQL_RECOMPILE: u32 = 53;
pub const BSI_PSM_RECOMPILE: u32 = 54;
pub const BSI_TSS_OVERFLOW_COUNT: u32 = 55;
pub const BSI_4K_PAGES: u32 = 56;
pub const BSI_32K_PAGES: u32 = 57;
pub const BSI_128K_PAGES: u32 = 58;
pub const BSI_BACKUP_PROGRESS_CURRENT: u32 = 59;
pub const BSI_BACKUP_PROGRESS_MAX: u32 = 60;
pub const BSI_PAGES_USED: u32 = 61;
pub const BSI_4K_PAGES_USED: u32 = 62;
pub const BSI_32K_PAGES_USED: u32 = 63;
pub const BSI_128K_PAGES_USED: u32 = 64;
pub const BSI_PAGES: u32 = 65;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneEntry"][::std::mem::size_of::<_RuneEntry>() - 24usize];
    ["Alignment of _RuneEntry"][::std::mem::align_of::<_RuneEntry>() - 8usize];
    ["Offset of field: _RuneEntry::__min"][::std::mem::offset_of!(_RuneEntry, __min) - 0usize];
    ["Offset of field: _RuneEntry::__max"][::std::mem::offset_of!(_RuneEntry, __max) - 4usize];
    ["Offset of field: _RuneEntry::__map"][::std::mem::offset_of!(_RuneEntry, __map) - 8usize];
    ["Offset of field: _RuneEntry::__types"][::std::mem::offset_of!(_RuneEntry, __types) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneRange"][::std::mem::size_of::<_RuneRange>() - 16usize];
    ["Alignment of _RuneRange"][::std::mem::align_of::<_RuneRange>() - 8usize];
    ["Offset of field: _RuneRange::__nranges"]
        [::std::mem::offset_of!(_RuneRange, __nranges) - 0usize];
    ["Offset of field: _RuneRange::__ranges"]
        [::std::mem::offset_of!(_RuneRange, __ranges) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneCharClass"][::std::mem::size_of::<_RuneCharClass>() - 20usize];
    ["Alignment of _RuneCharClass"][::std::mem::align_of::<_RuneCharClass>() - 4usize];
    ["Offset of field: _RuneCharClass::__name"]
        [::std::mem::offset_of!(_RuneCharClass, __name) - 0usize];
    ["Offset of field: _RuneCharClass::__mask"]
        [::std::mem::offset_of!(_RuneCharClass, __mask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneLocale"][::std::mem::size_of::<_RuneLocale>() - 3208usize];
    ["Alignment of _RuneLocale"][::std::mem::align_of::<_RuneLocale>() - 8usize];
    ["Offset of field: _RuneLocale::__magic"]
        [::std::mem::offset_of!(_RuneLocale, __magic) - 0usize];
    ["Offset of field: _RuneLocale::__encoding"]
        [::std::mem::offset_of!(_RuneLocale, __encoding) - 8usize];
    ["Offset of field: _RuneLocale::__sgetrune"]
        [::std::mem::offset_of!(_RuneLocale, __sgetrune) - 40usize];
    ["Offset of field: _RuneLocale::__sputrune"]
        [::std::mem::offset_of!(_RuneLocale, __sputrune) - 48usize];
    ["Offset of field: _RuneLocale::__invalid_rune"]
        [::std::mem::offset_of!(_RuneLocale, __invalid_rune) - 56usize];
    ["Offset of field: _RuneLocale::__runetype"]
        [::std::mem::offset_of!(_RuneLocale, __runetype) - 60usize];
    ["Offset of field: _RuneLocale::__maplower"]
        [::std::mem::offset_of!(_RuneLocale, __maplower) - 1084usize];
    ["Offset of field: _RuneLocale::__mapupper"]
        [::std::mem::offset_of!(_RuneLocale, __mapupper) - 2108usize];
    ["Offset of field: _RuneLocale::__runetype_ext"]
        [::std::mem::offset_of!(_RuneLocale, __runetype_ext) - 3136usize];
    ["Offset of field: _RuneLocale::__maplower_ext"]
        [::std::mem::offset_of!(_RuneLocale, __maplower_ext) - 3152usize];
    ["Offset of field: _RuneLocale::__mapupper_ext"]
        [::std::mem::offset_of!(_RuneLocale, __mapupper_ext) - 3168usize];
    ["Offset of field: _RuneLocale::__variable"]
        [::std::mem::offset_of!(_RuneLocale, __variable) - 3184usize];
    ["Offset of field: _RuneLocale::__variable_len"]
        [::std::mem::offset_of!(_RuneLocale, __variable_len) - 3192usize];
    ["Offset of field: _RuneLocale::__ncharclasses"]
        [::std::mem::offset_of!(_RuneLocale, __ncharclasses) - 3196usize];
    ["Offset of field: _RuneLocale::__charclasses"]
        [::std::mem::offset_of!(_RuneLocale, __charclasses) - 3200usize];
};
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MimerSession_struct {
    _unused: [u8; 0],
}
#[doc = " A handle to a database session. Sessions handles are created by #MimerBeginSession and #MimerBeginSessionRcv."]
pub type MimerSession = *mut MimerSession_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MimerStatement_struct {
    _unused: [u8; 0],
}
#[doc = " A handle to an active statement. The handle is created by #MimerBeginStatement and #MimerBeginStatementRcv."]
pub type MimerStatement = *mut MimerStatement_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MimerLob_struct {
    _unused: [u8; 0],
}
pub type MimerLob = *mut MimerLob_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MimerHandle_struct {
    _unused: [u8; 0],
}
pub type MimerHandle = *mut MimerHandle_struct;
extern "C" {
    pub fn MimerBeginSession(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: *mut MimerSession,
    ) -> i32;
}
extern "C" {
    pub fn MimerBeginSessionC(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut MimerSession,
    ) -> i32;
}
extern "C" {
    pub fn MimerBeginSession8(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut MimerSession,
    ) -> i32;
}
extern "C" {
    pub fn MimerEndSession(arg1: *mut MimerSession) -> i32;
}
extern "C" {
    pub fn MimerEndSessionHard(arg1: *mut MimerSession) -> i32;
}
extern "C" {
    pub fn MimerBeginStatement(
        arg1: MimerSession,
        arg2: *const wchar_t,
        arg3: i32,
        arg4: *mut MimerStatement,
    ) -> i32;
}
extern "C" {
    pub fn MimerBeginStatementC(
        arg1: MimerSession,
        arg2: *const ::std::os::raw::c_char,
        arg3: i32,
        arg4: *mut MimerStatement,
    ) -> i32;
}
extern "C" {
    pub fn MimerBeginStatement8(
        arg1: MimerSession,
        arg2: *const ::std::os::raw::c_char,
        arg3: i32,
        arg4: *mut MimerStatement,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetString(arg1: MimerStatement, arg2: i16, arg3: *const wchar_t) -> i32;
}
extern "C" {
    pub fn MimerSetStringC(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetString8(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetStringLen(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *const wchar_t,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetStringLenC(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *const ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetStringLen8(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *const ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetBinary(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetInt32(arg1: MimerStatement, arg2: i16, arg3: i32) -> i32;
}
extern "C" {
    pub fn MimerSetInt64(arg1: MimerStatement, arg2: i16, arg3: i64) -> i32;
}
extern "C" {
    pub fn MimerSetDouble(arg1: MimerStatement, arg2: i16, arg3: f64) -> i32;
}
extern "C" {
    pub fn MimerExecute(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerOpenCursor(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerFetch(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerFetchSkip(arg1: MimerStatement, arg2: i32) -> i32;
}
extern "C" {
    pub fn MimerFetchScroll(arg1: MimerStatement, arg2: i32, arg3: i32) -> i32;
}
extern "C" {
    pub fn MimerCloseCursor(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerEndStatement(arg1: *mut MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerGetString(arg1: MimerStatement, arg2: i16, arg3: *mut wchar_t, arg4: usize) -> i32;
}
extern "C" {
    pub fn MimerGetStringC(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetString8(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetBinary(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetInt32(arg1: MimerStatement, arg2: i16, arg3: *mut i32) -> i32;
}
extern "C" {
    pub fn MimerGetInt64(arg1: MimerStatement, arg2: i16, arg3: *mut i64) -> i32;
}
extern "C" {
    pub fn MimerGetDouble(arg1: MimerStatement, arg2: i16, arg3: *mut f64) -> i32;
}
extern "C" {
    pub fn MimerBeginTransaction(arg1: MimerSession, arg2: i32) -> i32;
}
extern "C" {
    pub fn MimerEndTransaction(arg1: MimerSession, arg2: i32) -> i32;
}
extern "C" {
    pub fn MimerSetLob(arg1: MimerStatement, arg2: i16, arg3: usize, arg4: *mut MimerLob) -> i32;
}
extern "C" {
    pub fn MimerSetLob2(arg1: MimerStatement, arg2: i16, arg3: *mut MimerLob) -> i32;
}
extern "C" {
    pub fn MimerSetLobLength(arg1: MimerLob, arg2: i64) -> i32;
}
extern "C" {
    pub fn MimerSetBlobData(
        arg1: *mut MimerLob,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetNclobData(arg1: *mut MimerLob, arg2: *const wchar_t, arg3: usize) -> i32;
}
extern "C" {
    pub fn MimerSetNclobDataC(
        arg1: *mut MimerLob,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetNclobData8(
        arg1: *mut MimerLob,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetLob(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut usize,
        arg4: *mut MimerLob,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetLob2(arg1: MimerStatement, arg2: i16, arg3: *mut MimerLob) -> i32;
}
extern "C" {
    pub fn MimerGetLobLength(arg1: MimerLob) -> i64;
}
extern "C" {
    pub fn MimerGetBlobData(
        arg1: *mut MimerLob,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetNclobData(arg1: *mut MimerLob, arg2: *mut wchar_t, arg3: usize) -> i32;
}
extern "C" {
    pub fn MimerGetNclobDataC(
        arg1: *mut usize,
        arg2: *mut MimerLob,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetNclobData8(
        arg1: *mut MimerLob,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerIsNull(arg1: MimerStatement, arg2: i16) -> i32;
}
extern "C" {
    pub fn MimerSetNull(arg1: MimerStatement, arg2: i16) -> i32;
}
extern "C" {
    pub fn MimerPing(arg1: MimerSession) -> i32;
}
extern "C" {
    pub fn MimerCurrentRow(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerGetBoolean(arg1: MimerStatement, arg2: i16) -> i32;
}
extern "C" {
    pub fn MimerRowSize(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerSetArraySize(arg1: MimerStatement, arg2: i32) -> i32;
}
extern "C" {
    pub fn MimerExecuteStatement(arg1: MimerSession, arg2: *const wchar_t) -> i32;
}
extern "C" {
    pub fn MimerExecuteStatementC(arg1: MimerSession, arg2: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn MimerExecuteStatement8(arg1: MimerSession, arg2: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn MimerGetSequenceInt64(arg1: MimerStatement, arg2: *mut i64) -> i32;
}
extern "C" {
    pub fn MimerSetBoolean(arg1: MimerStatement, arg2: i16, arg3: i32) -> i32;
}
extern "C" {
    pub fn MimerGetError(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut i32,
        arg3: *mut wchar_t,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetErrorC(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut i32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetError8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut i32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerNextError(arg1: *mut ::std::os::raw::c_void) -> i32;
}
extern "C" {
    pub fn MimerGetCallbackC(
        arg1: MimerStatement,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut i32,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetCallback8(
        arg1: MimerStatement,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut i32,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetCallback(
        arg1: MimerStatement,
        arg2: *mut wchar_t,
        arg3: usize,
        arg4: *mut i32,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetCallbackParamType(arg1: MimerStatement, arg2: i16) -> i32;
}
extern "C" {
    pub fn MimerGetCallbackParamStringC(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetCallbackParamString8(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetCallbackParamString(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut wchar_t,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerGetCallbackParamInt64(arg1: MimerStatement, arg2: i16, arg3: *mut i64) -> i32;
}
extern "C" {
    pub fn MimerGetFloat(arg1: MimerStatement, arg2: i16, arg3: *mut f32) -> i32;
}
extern "C" {
    pub fn MimerSetFloat(arg1: MimerStatement, arg2: i16, arg3: f32) -> i32;
}
extern "C" {
    pub fn MimerNext(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerColumnCount(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerParameterCount(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerColumnType(arg1: MimerStatement, arg2: i16) -> i32;
}
extern "C" {
    pub fn MimerColumnName(arg1: MimerStatement, arg2: i16, arg3: *mut wchar_t, arg4: usize)
        -> i32;
}
extern "C" {
    pub fn MimerColumnNameC(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerColumnName8(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerParameterType(arg1: MimerStatement, arg2: i16) -> i32;
}
extern "C" {
    pub fn MimerGetStatistics(arg1: MimerSession, arg2: *mut i32, arg3: i16) -> i32;
}
extern "C" {
    pub fn MimerCancel(arg1: MimerSession) -> i32;
}
extern "C" {
    pub fn MimerParameterName(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut wchar_t,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerParameterNameC(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerParameterName8(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> i32;
}
extern "C" {
    pub fn MimerParameterMode(arg1: MimerStatement, arg2: i16) -> i32;
}
extern "C" {
    pub fn MimerAddBatch(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerParameterNullable(arg1: MimerStatement, arg2: i16) -> i32;
}
extern "C" {
    pub fn MimerGetUUID(arg1: MimerStatement, arg2: i16, uuid: *mut ::std::os::raw::c_uchar)
        -> i32;
}
extern "C" {
    pub fn MimerSetUUID(
        arg1: MimerStatement,
        arg2: i16,
        uuid: *const ::std::os::raw::c_uchar,
    ) -> i32;
}
extern "C" {
    pub fn MimerMoreResults(arg1: MimerStatement) -> i32;
}
extern "C" {
    pub fn MimerAPIVersion() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mimer_gis_location {
    pub latitude: f64,
    pub longitude: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mimer_gis_location"][::std::mem::size_of::<mimer_gis_location>() - 16usize];
    ["Alignment of mimer_gis_location"][::std::mem::align_of::<mimer_gis_location>() - 8usize];
    ["Offset of field: mimer_gis_location::latitude"]
        [::std::mem::offset_of!(mimer_gis_location, latitude) - 0usize];
    ["Offset of field: mimer_gis_location::longitude"]
        [::std::mem::offset_of!(mimer_gis_location, longitude) - 8usize];
};
extern "C" {
    pub fn MimerGetGisLocation(
        arg1: MimerStatement,
        arg2: i16,
        arg3: *mut mimer_gis_location,
    ) -> i32;
}
extern "C" {
    pub fn MimerSetGisLocation(arg1: MimerStatement, arg2: i16, arg3: mimer_gis_location) -> i32;
}
extern "C" {
    pub fn MimerGetGisLatitude(arg1: MimerStatement, arg2: i16, arg3: *mut f64) -> i32;
}
extern "C" {
    pub fn MimerSetGisLatitude(arg1: MimerStatement, arg2: i16, arg3: f64) -> i32;
}
extern "C" {
    pub fn MimerGetGisLongitude(arg1: MimerStatement, arg2: i16, arg3: *mut f64) -> i32;
}
extern "C" {
    pub fn MimerSetGisLongitude(arg1: MimerStatement, arg2: i16, arg3: f64) -> i32;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
